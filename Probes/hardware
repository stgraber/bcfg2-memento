#!/usr/bin/python3
# Bcfg2 hardware probe
# Written by Stephane Graber <stgraber@ubuntu.com>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import json
import os
import subprocess
import sys

# Attributes dictionary
attributes = {}

# Return the list of network interfaces
attributes['interfaces'] = []
for interface in os.listdir("/sys/class/net/"):
    if os.path.isdir(os.path.join("/sys/class/net/", interface)):
        attributes['interfaces'].append(interface)

# Detect containers vs host
process = subprocess.Popen(["running-in-container"], stdout=subprocess.PIPE,
                           universal_newlines=True)

if process.wait() == 0:
    print("group:container")
    print("group:%s-ve" % process.stdout.read().strip())

    # The next tests are for hosts, so exit now
    print(json.dumps(attributes))
    sys.exit(0)
else:
    print("group:host")

# Export some product information
vendor = "unknown"
model = "unknown"
if os.path.exists("/sys/class/dmi/id"):

    with open("/sys/class/dmi/id/chassis_vendor", "r") as fd:
        vendor = "".join(filter(str.isalnum, fd.read())).lower()

    with open("/sys/class/dmi/id/product_name", "r") as fd:
        model = "".join(filter(str.isalnum, fd.read())).lower()

print("group:hw-vendor-%s" % vendor)
print("group:hw-model-%s" % model)

# Hardware monitoring
## HP Advanced Server Management
if vendor == "hp":
    hp_exclude_list = ["proliantdl165g5p"]
    if model not in hp_exclude_list and "prolian" in model:
        print("group:hpasm")

## Dell OMSA
if vendor == "dellinc":
    dell_exclude_list = []

    if model not in dell_exclude_list and "poweredge" in model:
        print("group:dellomsa")

# Detect NIC bonding
if os.path.exists("/sys/class/net/bonding_masters"):
    with open("/sys/class/net/bonding_masters", "r") as fd:
        if fd.read().strip():
            print("group:bonding")

# Detect software RAID
if os.path.exists("/proc/mdstat"):
    with open("/proc/mdstat", "r") as fd:
        if "blocks" in fd.read():
            print("group:md-raid")

# Detect HP SmartArray controlers
if os.path.exists("/sys/module/hpsa"):
    print("group:hpsa")

print(json.dumps(attributes))
sys.exit(0)
