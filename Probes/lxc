#!/usr/bin/python3
# Bcfg2 LXC probe
# Written by Stephane Graber <stgraber@ubuntu.com>

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import json
import os
import sys

try:
    import lxc
except ImportError:
    sys.exit(0)

containers = []

for container_name in sorted(lxc.list_containers()):
    container = lxc.Container(container_name)

    entry = {}
    entry['name'] = container_name
    entry['path'] = container.get_config_item("lxc.rootfs")

    if not os.path.exists(entry['path']):
        continue

    containers.append(entry)

for cpath in ("/var/lib/lxd/containers/",
             "/var/snap/lxd/common/lxd/containers"):
    if os.path.exists(cpath):
        for container_name in sorted(os.listdir(cpath)):
            path = os.path.realpath(os.path.join(cpath, container_name, "rootfs"))
            if not os.path.exists(path):
                container = lxc.Container(container_name, cpath)
                if container.state != "RUNNING":
                    continue

                with open("/proc/%d/status" % container.init_pid, "r") as fd:
                    ppid = ""
                    for line in fd:
                        if line.startswith("PPid:"):
                            ppid = line.split()[-1]
                            break
                    else:
                        continue

                path = os.path.join("/proc", ppid, "root", path[1:])

            entry = {}
            entry['name'] = container_name
            entry['path'] = path

            if not os.path.exists(entry['path']):
                continue

            containers.append(entry)

print(json.dumps(containers))
