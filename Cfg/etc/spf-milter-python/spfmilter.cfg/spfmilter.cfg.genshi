# This file is managed by Bcfg2. Any local change will be lost.
{% python
    # Import the bcfg2_repo module
    import os
    import sys
    sys.path.insert(0, os.path.join(repo, "lib"))

    from bcfg2_repo import config

    # Load the config
    conf = config.get_config_section(repo, metadata, "postfix",
                                     "spfmilter.cfg")

    if not isinstance(conf['trusted_relays'], list):
        conf['trusted_relays'] = [conf['trusted_relays']]

    trusted_relays = ", ".join(conf['trusted_relays'])
%}\

[milter]
# The socket used to communicate with sendmail
#socketname = /var/run/spf-milter-python/spfmiltersock
socketname = inet:10021@127.0.0.1
# Name of the milter given to sendmail
name = pyspffilter
# Trusted relays such as secondary MXes that should not have SPF checked.
trusted_relay = ${trusted_relays}
# Internal networks that should not have SPF checked.
internal_connect = 127.0.0.1

# TEMPFAIL, REJECT, CONTINUE
untrapped_exception = CONTINUE

# See http://www.openspf.com for more info on SPF.
[spf]
# Use sendmail access map or similar format for detailed spf policy.
# SPF entries in the access map will override defaults.
access_file = /etc/mail/access.db
# Connections that get an SPF pass for a pretend MAIL FROM of 
# postmaster@sometrustedforwarder.com skip SPF checks for the real MAIL FROM.
# This is for non-SRS forwarders.  It is a simple implementation that
# is inefficient for more than a few entries.
;trusted_forwarder = careerbuilder.com
